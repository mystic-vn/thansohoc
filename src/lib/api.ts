// ƒê∆∞·ªùng d·∫´n API c∆° s·ªü
const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3001';

// API service
const API_URL = API_BASE_URL;

// User interfaces
export interface User {
  id: number;
  _id?: string;
  firstName: string;
  lastName: string;
  name?: string;
  email: string;
  role: 'Admin' | 'User';
  status: 'Active' | 'Inactive';
  created: string;
  birthDate?: string;
  isDeleted: boolean;
  isEmailVerified: boolean;
}

export interface CreateUserRequest {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  birthDate?: string;
}

export interface UpdateUserRequest {
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  birthDate?: string;
  role?: 'Admin' | 'User';
  status?: 'Active' | 'Inactive';
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse extends User {
  token: string;
}

export interface VerifyEmailRequest {
  email: string;
  otp: string;
}

export interface ResendOtpRequest {
  email: string;
}

// Website interfaces
export interface WebsiteSettings {
  _id?: string;
  name: string;
  description?: string;
  logo?: string;
  favicon?: string;
  contactEmail: string;
  contactPhone?: string;
  address?: string;
  socialMedia?: {
    facebook?: string;
    twitter?: string;
    instagram?: string;
    youtube?: string;
    linkedin?: string;
  };
  footer?: {
    copyright: string;
    showYear?: boolean;
    links?: Array<{
      title: string;
      url: string;
    }>;
  };
  seo?: {
    title: string;
    description: string;
    keywords: string[];
    ogImage?: string;
  };
}

// Helper function ƒë·ªÉ l·∫•y headers v·ªõi token x√°c th·ª±c
const getAuthHeaders = () => {
  const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;
  
  // Th√™m debug log ƒë·ªÉ ki·ªÉm tra token
  if (typeof window !== 'undefined') {
    console.log('üîë Token t·ª´ localStorage:', token ? `${token.substring(0, 15)}...` : 'kh√¥ng c√≥ token');
  }
  
  return {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json',
  };
};

// API Functions
export const userApi = {
  // Get all users
  getAll: async (): Promise<User[]> => {
    const response = await fetch(`${API_URL}/users`);
    if (!response.ok) {
      throw new Error('L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng');
    }
    return response.json();
  },

  // Get user by ID
  getById: async (id: number, withDeleted: boolean = false): Promise<User> => {
    const response = await fetch(`${API_URL}/users/${id}?withDeleted=${withDeleted}`);
    if (!response.ok) {
      throw new Error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
    }
    return response.json();
  },

  // Login
  login: async (data: LoginRequest): Promise<LoginResponse> => {
    const response = await fetch(`${API_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }
    return response.json();
  },

  // Create user
  create: async (data: CreateUserRequest): Promise<User> => {
    const response = await fetch(`${API_URL}/users`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || 'L·ªói khi t·∫°o ng∆∞·ªùi d√πng');
    }
    return response.json();
  },

  // Update user
  update: async (id: number, data: UpdateUserRequest): Promise<User> => {
    const response = await fetch(`${API_URL}/users/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || 'L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng');
    }
    return response.json();
  },

  // Soft delete user
  softDelete: async (id: number): Promise<void> => {
    const response = await fetch(`${API_URL}/users/${id}`, {
      method: 'DELETE',
    });
    if (!response.ok) {
      throw new Error('L·ªói khi x√≥a ng∆∞·ªùi d√πng');
    }
  },

  // Hard delete user
  hardDelete: async (id: number): Promise<void> => {
    const response = await fetch(`${API_URL}/users/${id}/permanent`, {
      method: 'DELETE',
    });
    if (!response.ok) {
      throw new Error('L·ªói khi x√≥a ho√†n to√†n ng∆∞·ªùi d√πng');
    }
  },

  // Restore user
  restore: async (id: number): Promise<User> => {
    const response = await fetch(`${API_URL}/users/${id}/restore`, {
      method: 'POST',
    });
    if (!response.ok) {
      throw new Error('L·ªói khi kh√¥i ph·ª•c ng∆∞·ªùi d√πng');
    }
    return response.json();
  },

  // Verify email with OTP
  verifyEmail: async (data: VerifyEmailRequest): Promise<User> => {
    const response = await fetch(`${API_URL}/users/verify-email`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || 'L·ªói khi x√°c th·ª±c email');
    }
    return response.json();
  },

  // Resend OTP
  resendOtp: async (data: ResendOtpRequest): Promise<void> => {
    const response = await fetch(`${API_URL}/users/resend-otp`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || 'L·ªói khi g·ª≠i l·∫°i m√£ OTP');
    }
  },

  // Get current user based on JWT token
  getCurrentUser: async (): Promise<User | null> => {
    try {
      // L·∫•y token t·ª´ c·∫£ localStorage v√† cookie ƒë·ªÉ ƒë·∫£m b·∫£o x√°c th·ª±c
      let token = '';
      
      if (typeof window !== 'undefined') {
        // Th·ª≠ l·∫•y t·ª´ localStorage tr∆∞·ªõc
        token = localStorage.getItem('token') || '';
        
        // N·∫øu kh√¥ng c√≥ trong localStorage, th·ª≠ l·∫•y t·ª´ cookie
        if (!token) {
          const cookieName = process.env.NEXT_PUBLIC_AUTH_COOKIE_NAME || 'token';
          const cookies = document.cookie.split(';');
          for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.startsWith(cookieName + '=')) {
              token = cookie.substring(cookieName.length + 1);
              break;
            }
          }
        }
      }
      
      // Log ƒë·ªÉ debug
      console.log('Token s·ª≠ d·ª•ng cho API getCurrentUser:', token ? `${token.substring(0, 10)}...` : 'Kh√¥ng c√≥ token');
      
      if (!token) {
        console.error('Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c trong getCurrentUser');
        return null;
      }
      
      const response = await fetch(`${API_URL}/auth/me`, {
        headers: {
          'Authorization': `Bearer ${token}`
        },
        cache: 'no-store' // NgƒÉn cache ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
      });
      
      // Log response status ƒë·ªÉ debug
      console.log('K·∫øt qu·∫£ API getCurrentUser:', response.status, response.statusText);
      
      // Ki·ªÉm tra m√£ tr·∫°ng th√°i 401 (Unauthorized) ri√™ng ƒë·ªÉ x·ª≠ l√Ω t·ªët h∆°n
      if (response.status === 401) {
        console.error('Token x√°c th·ª±c ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá');
        // X√≥a token kh√¥ng h·ª£p l·ªá
        if (typeof window !== 'undefined') {
          localStorage.removeItem('token');
          document.cookie = `${process.env.NEXT_PUBLIC_AUTH_COOKIE_NAME || 'token'}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        }
        return null;
      }
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('L·ªói t·ª´ API getCurrentUser:', errorData);
        return null;
      }
      
      // L·∫•y d·ªØ li·ªáu v√† ki·ªÉm tra n·ªôi dung
      const responseText = await response.text();
      
      // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ph·∫£n h·ªìi r·ªóng
      if (!responseText || responseText.trim() === '') {
        console.error('API tr·∫£ v·ªÅ d·ªØ li·ªáu r·ªóng');
        return null;
      }
      
      console.log('D·ªØ li·ªáu th√¥ t·ª´ API:', responseText.length > 100 ? `${responseText.substring(0, 100)}...` : responseText);
      
      // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu vƒÉn b·∫£n th√†nh JSON
      let userData: any;
      try {
        userData = JSON.parse(responseText);
      } catch (e) {
        console.error('L·ªói ph√¢n t√≠ch JSON:', e);
        return null;
      }
      
      // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      if (!userData) {
        console.error('D·ªØ li·ªáu ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá: null');
        return null;
      }
      
      // Ki·ªÉm tra xem ƒë·ªëi t∆∞·ª£ng c√≥ r·ªóng kh√¥ng
      if (Object.keys(userData).length === 0) {
        console.error('D·ªØ li·ªáu ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá: ƒë·ªëi t∆∞·ª£ng r·ªóng');
        return null;
      }
      
      // T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng User m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu tr∆∞·ªùng
      const defaultUser: User = {
        id: userData.id || userData._id || 0,
        firstName: userData.firstName || '',
        lastName: userData.lastName || '',
        email: userData.email || '',
        role: userData.role || 'User',
        status: userData.status || 'Active',
        created: userData.created || new Date().toISOString(),
        birthDate: userData.birthDate || '',
        isDeleted: userData.isDeleted || false,
        isEmailVerified: userData.isEmailVerified || false
      };
      
      // L∆∞u token v√†o localStorage n·∫øu ch∆∞a c√≥ (ƒë·ªìng b·ªô gi·ªØa cookie v√† localStorage)
      if (typeof window !== 'undefined' && token && !localStorage.getItem('token')) {
        localStorage.setItem('token', token);
      }
      
      console.log('D·ªØ li·ªáu ng∆∞·ªùi d√πng h·ª£p l·ªá nh·∫≠n ƒë∆∞·ª£c:', { 
        id: defaultUser.id, 
        email: defaultUser.email, 
        firstName: defaultUser.firstName,
        lastName: defaultUser.lastName
      });
      
      return defaultUser;
    } catch (error) {
      console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i:', error);
      return null;
    }
  },

  // Logout
  logout: (): void => {
    if (typeof window !== 'undefined') {
      // X√≥a token v√† th√¥ng tin ng∆∞·ªùi d√πng
      localStorage.removeItem('token');
      localStorage.removeItem('userName');
      document.cookie = `${process.env.NEXT_PUBLIC_AUTH_COOKIE_NAME || 'token'}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
    }
  },

  // L·∫•y t·∫•t c·∫£ c√†i ƒë·∫∑t website
  getSettings: async (): Promise<WebsiteSettings> => {
    const response = await fetch(`${API_URL}/website/settings`, {
      headers: getAuthHeaders(),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'L·ªói khi l·∫•y c√†i ƒë·∫∑t website');
    }
    
    return await response.json();
  },
  
  // C·∫≠p nh·∫≠t c√†i ƒë·∫∑t website (y√™u c·∫ßu quy·ªÅn admin)
  updateSettings: async (data: Partial<WebsiteSettings>): Promise<WebsiteSettings> => {
    const response = await fetch(`${API_URL}/website/settings`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify(data),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t website');
    }
    
    return await response.json();
  },
};

// T·∫°o websiteApi ri√™ng ƒë·ªÉ qu·∫£n l√Ω c√†i ƒë·∫∑t website
export const websiteApi = {
  // L·∫•y t·∫•t c·∫£ c√†i ƒë·∫∑t website
  getSettings: async (): Promise<WebsiteSettings> => {
    const response = await fetch(`${API_URL}/website/settings`, {
      headers: getAuthHeaders(),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'L·ªói khi l·∫•y c√†i ƒë·∫∑t website');
    }
    
    return await response.json();
  },
  
  // C·∫≠p nh·∫≠t c√†i ƒë·∫∑t website (y√™u c·∫ßu quy·ªÅn admin)
  updateSettings: async (data: Partial<WebsiteSettings>): Promise<WebsiteSettings> => {
    const response = await fetch(`${API_URL}/website/settings`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify(data),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t website');
    }
    
    return await response.json();
  },
  
  // L·∫•y c√†i ƒë·∫∑t footer
  getFooterSettings: async (): Promise<any> => {
    const response = await fetch(`${API_URL}/website/footer`);
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'L·ªói khi l·∫•y c√†i ƒë·∫∑t footer');
    }
    
    return await response.json();
  },
  
  // L·∫•y c√†i ƒë·∫∑t SEO
  getSeoSettings: async (): Promise<any> => {
    const response = await fetch(`${API_URL}/website/seo`);
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'L·ªói khi l·∫•y c√†i ƒë·∫∑t SEO');
    }
    
    return await response.json();
  },
}; 