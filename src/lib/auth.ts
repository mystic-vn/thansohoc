'use client';

import { getCookie, syncAuthToken } from './cookies';

// Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p hay ch∆∞a
export async function isAuthenticated(): Promise<boolean> {
  try {
    if (typeof window === 'undefined') {
      return false; // Server-side
    }
    
    // ƒê·ªìng b·ªô token gi·ªØa cookie v√† localStorage
    const token = syncAuthToken() || localStorage.getItem('token');
    
    if (!token) {
      return false;
    }
    
    // N·∫øu c·∫ßn, ·ªü ƒë√¢y c√≥ th·ªÉ th√™m logic ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
    // b·∫±ng c√°ch g·ªçi API
    
    return true;
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra x√°c th·ª±c:', error);
    return false;
  }
}

// Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn admin hay kh√¥ng
export async function isAdmin(): Promise<boolean> {
  try {
    if (typeof window === 'undefined') {
      return false; // Server-side
    }
    
    // ƒê·ªìng b·ªô token gi·ªØa cookie v√† localStorage
    const token = syncAuthToken() || localStorage.getItem('token');
    
    if (!token) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y token trong isAdmin()");
      return false;
    }
    
    // Ki·ªÉm tra quy·ªÅn admin t·ª´ JWT token ho·∫∑c d·ªØ li·ªáu ng∆∞·ªùi d√πng
    const userDataStr = localStorage.getItem('userData');
    console.log("üîç Ki·ªÉm tra userData t·ª´ localStorage:", userDataStr ? "C√≥ d·ªØ li·ªáu" : "Kh√¥ng c√≥ d·ªØ li·ªáu");
    
    if (userDataStr) {
      try {
        const userData = JSON.parse(userDataStr);
        console.log("üìä Th√¥ng tin userData:", {
          role: userData.role,
          isAdmin: userData.isAdmin,
          userId: userData.id || userData._id
        });
        
        // Ki·ªÉm tra n·∫øu user c√≥ role l√† admin ho·∫∑c isAdmin = true
        if (userData.role === 'Admin' || userData.role === 'admin' || userData.isAdmin === true) {
          console.log("‚úÖ Ng∆∞·ªùi d√πng c√≥ quy·ªÅn Admin t·ª´ localStorage");
          return true;
        } else {
          console.log("‚ùå Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn Admin theo userData");
        }
      } catch (e) {
        console.error('L·ªói parse userData:', e);
      }
    } else {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y userData trong localStorage");
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ quy·ªÅn admin trong localStorage
    // th√¨ g·ªçi API ƒë·ªÉ ki·ªÉm tra
    console.log("üîÑ Th·ª≠ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ API...");
    
    try {
      const API_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3001';
      const response = await fetch(`${API_URL}/auth/me`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const userData = await response.json();
        console.log("üìä Th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API:", {
          role: userData.role,
          userId: userData.id || userData._id
        });
        
        // C·∫≠p nh·∫≠t userData trong localStorage
        localStorage.setItem('userData', JSON.stringify(userData));
        
        if (userData.role === 'Admin' || userData.role === 'admin' || userData.isAdmin === true) {
          console.log("‚úÖ Ng∆∞·ªùi d√πng c√≥ quy·ªÅn Admin (t·ª´ API)");
          return true;
        } else {
          console.log("‚ùå Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn Admin (t·ª´ API)");
        }
      } else {
        console.warn("‚ö†Ô∏è API tr·∫£ v·ªÅ l·ªói:", response.status);
      }
    } catch (apiError) {
      console.error("‚ùå L·ªói khi g·ªçi API:", apiError);
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y quy·ªÅn admin trong localStorage ho·∫∑c t·ª´ API, tr·∫£ v·ªÅ false
    console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y quy·ªÅn admin cho ng∆∞·ªùi d√πng n√†y');
    return false;
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra quy·ªÅn admin:', error);
    return false;
  }
} 